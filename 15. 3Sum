Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
----------------------------------------------------------
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = set()
        nums.sort()
        _set = set()
        for i in range(len(nums)):
                for j in range(i+1, len(nums)):
                    sol = -(nums[i]+nums[j])
                    if sol in _set:
                        res.add((nums[i], nums[j], sol))
                _set.add(nums[i])
        return list(res)
