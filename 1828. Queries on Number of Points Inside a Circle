You are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2D plane. Multiple points can have the same coordinates.

You are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj.

For each query queries[j], compute the number of points inside the jth circle. Points on the border of the circle are considered inside.

Return an array answer, where answer[j] is the answer to the jth query
-----------------------------------------------------------------------------

class Solution:
    def countPoints(self, points: List[List[int]], queries: List[List[int]]) -> List[int]:
        ans = []
        for circle in queries:
            radius = circle[-1]
            count = 0
            
            # Calculate distance of each point to circle's origin
            # If distance <= radius, point is in circle
            for p in points:
                distance = self.calcDistance(p[0], p[1], circle[0], circle[1])
                if distance <= radius: count += 1
            ans.append(count)
        return ans
                
                
    def calcDistance(self, pX, pY, cX, cY):
        # Euclidean distance formula
        root = pow(pX-cX, 2) + pow(pY-cY, 2)
        return math.sqrt(root)
